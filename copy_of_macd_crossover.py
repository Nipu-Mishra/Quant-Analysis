# -*- coding: utf-8 -*-
"""Copy of MACD Crossover

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1krIYmUnDdNnbAQyON4rsR6vsQIpGIHIm
"""

# Description: This program uses the Moving Average Convergence/Divergence (MACD) crossover to determine when to buy and sell stock.

pip install yfinance

# Import the libraries
import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

# Load the data
AAPL = yf.download('AAPL',period = '10mo')

#Show the data
df = pd.DataFrame(AAPL)
df

# Visually show the stock price
plt.figure(figsize=(18, 6))
plt.plot(df['Close'], label='Close')
plt.xticks(rotation=45)
plt.title('Close Price History')
plt.xlabel('Date')
plt.ylabel('Price USD ($)')
plt.show()

#Calculate the MACD and signal line indicators
#Calculate the short term exponential moving average (EMA)
ShortEMA = df.Close.ewm(span=12, adjust = False).mean()
#Calculate the long term exponential moving average
LongEMA = df.Close.ewm(span=26, adjust = False).mean()
#Calculate the MACD line
MACD  = ShortEMA - LongEMA
#Calculate the signal line 
Signal = MACD.ewm(span=9, adjust=False).mean()

#plot the chart
plt.figure(figsize=(20,6))
plt.plot(df.index, MACD, label = 'AAPL MACD', color= 'red')
plt.plot(df.index,Signal,label='Signal Line',color='blue')
plt.xticks(rotation = 45)
plt.legend(loc='upper left')
plt.show

# Create new columns for the data
df['MACD'] = MACD
df['Signal Line'] = Signal
#Show the data
df

#Create a function to signal when to buy and sell an asset
def buy_sell(signal):
  Buy = []
  Sell = []
  flag = -1

  for i in range(0, len(signal)):
    if signal['MACD'][i] > signal['Signal Line'][i]:
      Sell.append(np.nan)
      if flag != 1:
        Buy.append(signal['Close'][i])
        flag = 1
      else:
        Buy.append(np.nan)
    elif signal['MACD'][i] < signal['Signal Line'][i]:
      Buy.append(np.nan)
      if flag != 0:
        Sell.append(signal['Close'][i])
        flag = 0
      else:
        Sell.append(np.nan)
    else:  
      Buy.append(np.nan)
      Sell.append(np.nan)

  return (Buy, Sell)

#Create buy and sell column
a = buy_sell(df)
df['Buy_Signal_Price'] = a[0]
df['Sell_Signal_Price'] = a[1]

# Show the data
df

#Visually show the stock buy and sell signals
plt.figure(figsize=(20,6))
plt.scatter(df.index, df['Buy_Signal_Price'], color='green', label='Buy',marker= '^',alpha = 1)
plt.scatter(df.index, df['Sell_Signal_Price'], color='red', label='Sell',marker= '^',alpha = 1)
plt.plot(df['Close'],label='Close Price', alpha = 0.7)
plt.title('Close Price Buy & Sell Signals')
plt.xlabel('Date')
plt.xticks(rotation = 45)
plt.ylabel('Close Price USD ($')
plt.legend(loc = 'upper left')
plt.show